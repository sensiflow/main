{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducing Person/Object Detection to Your Application","text":"<p>Welcome to the documentation for our detection system! This system combines the power of machine learning with the convenience of modern technologies to provide real-time monitoring and analysis of camera feeds.</p> <p>With our system, you can easily set up a camera feed and receive real-time object and person detection notifications. Our object detection and person detection models are based on YOLOv5, a state-of-the-art deep learning algorithm that offers high accuracy and real-time performance.</p> <p>In this documentation, you will find all the information you need to set up and use our system in your organization. From installation and configuration to API usage and advanced analytics, we've got you covered. So let's get started and see what our system can do for you!</p>"},{"location":"#technologies","title":"Technologies","text":"<p>Our system is built on top of the following open-source technologies:</p> <p>Kotlin</p><p>Used to build the web API</p> <p>Docker</p><p>Used for containerization of the application</p> <p>React</p><p>Used to build the web application</p> <p>Spring Boot</p><p>Used to build the web API</p> <p>PostgreSQL</p><p>Used as the database</p> <p>RabbitMQ</p><p>Used as the message broker for the detection system pipeline</p> <p>YOLOv5</p><p>Used as the machine learning algorithm for object and person detection</p> <p>Python</p><p>Used to build the entire image processor module</p> <p>MediaMTX</p><p>Used as the media server</p>"},{"location":"api/reference/","title":"API Reference","text":"<p>The SensiFlow API is based on REST. Accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.</p>"},{"location":"api/reference/#status-codes","title":"Status Codes","text":"<p>SensiFlow uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted or didn't met the constraints required, trying to access a resource that you're not supposed to, etc.). Codes in the 5xx range indicate an error with SensiFlow's servers (these are rare).</p> Code Description 200 OK. Request succeeded. 201 Created. Request succeeded and a new resource was created. 202 Accepted. Request accepted for processing. Can't be completed instantly. 204 No Content. Request succeeded but there is no content to return. 400 Bad Request. The request is invalid. 401 Unauthorized. Authentication failed. 403 Forbidden. You do not have permission to access the requested resource. 404 Not Found. The requested resource does not exist. 409 Conflict. The request could not be completed due to a conflict. 500 Internal Server Error. Something went wrong on SensiFlow's end."},{"location":"api/reference/#pagination","title":"Pagination","text":"<p>Requests that return multiple items will be paginated to 20 items by default. You can specify further pages with the <code>page</code> parameter. You can also set a custom page size up to 50 with the <code>size</code> parameter.</p> Parameter Type Description Default max page number The page number to retrieve. 1 ------ size number The number of items to retrieve. 20 50"},{"location":"api/reference/#page","title":"Page","text":"<p>The response for a paginated request always follows the same <code>page</code> structure:</p> <pre><code>Example GET /devices?page=1&amp;size=10\n{\n\"totalPages\": 2,\n\"totalElements\": 10,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Cafeteria Device\",\n\"description\": \"This device is located in second floor of the cafeteria\",\n\"stream\": \"rtsp://my-stream:5412/1\",\n\"processedStreamURL\": \"rtsp://my-stream:5412/1/detected\",\n\"status\": \"ONLINE\",\n},\n{\n\"id\": 2,\n\"name\": \"Entrance Device\",\n\"description\": \"This device is located at the entrance of the building\",\n\"stream\": \"rtsp://my-stream:5412/2\",\n\"processedStreamURL\": \"rtsp://my-stream:5412/2/detected\",\n\"status\": \"OFFLINE\",\n}\n]\n}\n</code></pre>"},{"location":"api/reference/#expanding-responses","title":"Expanding Responses","text":"<p>Many objects allow you to request additional information as an expanded response by using the <code>expand</code> request parameter.</p> Parameter Type Description Required Default expanded boolean Expand the response to include additional information. No false <p>This allows you to request additional information about the object in the response, without having to make additional requests.</p> Expand example <p>In the given example, our request is for a device group with an ID of 1. However, since we haven't provided the expand parameter, the response will solely consist of the group's metadata. To obtain additional information about the group, such as the devices associated with it, we can include expand=true in our request.</p> <pre><code>GET /groups?page=1&amp;size=2&amp;expanded=false\nContent-Type: application/json\n{\n\"totalElements\": 1,\n\"totalPages\": 1,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Group 1\",\n\"description\": \"Group 1 description\"\n}\n]\n}\nGET /groups?page=1&amp;size=2&amp;expanded=true\nContent-Type: application/json\n{\n\"totalElements\": 1,\n\"totalPages\": 1,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Group 1\",\n\"description\": \"Group 1 description\",\n\"devices\": {\n\"totalElements\": 1,\n\"totalPages\": 1,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Device 1\",\n\"description\": \"This is device 1\",\n\"streamURL\": \"rtsp://my-stream:5412/1\",\n\"processingState\": \"ACTIVE\",\n\"processedStreamURL\": \"rtsp://my-stream:5412/1/detected\",\n\"userID\": 0,\n\"deviceGroupsID\": [1]\n}\n]\n}\n}\n]\n}\n</code></pre>"},{"location":"api/reference/#camera-stream-support","title":"Camera Stream Support","text":"<p>Currently, SensiFlow supports only RTSP streams. We are working on adding support for RTMP and HLS streams.</p> <p>[RTSP]: Real-Time Streaming Protocol [HLS]: Http Live Streaming *[RTMP]: Real-Time Messaging Protocol</p>"},{"location":"api/access-control/general/","title":"Access Control","text":""},{"location":"api/access-control/general/#authorization","title":"Authorization","text":"<p>A RBAC is implemented, limiting the acess to the API to only authorized users. The following roles are available:</p> <ul> <li><code>Admin</code></li> <li><code>Moderator</code></li> <li><code>User</code></li> </ul> <p>The <code>Admin</code> role is the highest role, an <code>Admin</code> user is created by default when the API is deployed. Having the following login:</p> <ul> <li>Email: admin@gmail.com</li> <li>Password: Admin123.</li> </ul> <p>These credentials can then be changed in the web interface or through API requests.</p> <p>The <code>Admin</code> user can then create new users, and assign them its role.</p> <p>The following table shows the access to the resources for each role:</p> Resource Action Admin Moderator User User Create \u2713 \u2713 X User Read \u2713 \u2713 \u2713 User Update \u2713 \u2713 \u2713 User Delete \u2713 X X Device Create \u2713 \u2713 X Device Read \u2713 \u2713 \u2713 Device Update \u2713 \u2713 X Device Delete \u2713 X X Device Group Create \u2713 \u2713 X Device Group Read \u2713 \u2713 \u2713 Device Group Update \u2713 \u2713 X Device Group Delete \u2713 X X Processed Stream Read \u2713 \u2713 \u2713 Role Update \u2713 X X"},{"location":"api/access-control/general/#authentication","title":"Authentication","text":"<p>The API uses Cookie based authentication, which means that the user maintains a session with the API, and the API uses the session to identify the user. The session is created when the user logs in either by registering or using the login endpoint, and is destroyed when the user logs out. A user can only have one session at a time, which means that if the user logs in again, the previous session is destroyed.</p> <p>A Cookie based authentication is used because it can prevent XSS attacks this is done by setting the <code>HttpOnly</code> flag to the cookie, the cookie can only be accessed by the API, and not by malicious scripts. It also prevents CSRF attacks, this is done by setting the <code>SameSite</code> flag to the cookie, the cookie can only be sent by the API, and not by malicious scripts.</p>"},{"location":"api/access-control/general/#login","title":"Login","text":"<p>The login is done by making a <code>POST</code> request to the login endpoint. After the login is successful, the API will return a cookie with the session, and the user can then make requests to the API.</p>"},{"location":"api/access-control/general/#logout","title":"Logout","text":"<p>The logout is done by making a <code>POST</code> request to the logout endpoint. This will destroy the session, and the user will have to login again to make requests to the API.</p>"},{"location":"api/access-control/general/#register","title":"Register","text":"<p>In Sensiflow, a user can be registered by an <code>Admin</code> or a <code>Moderator</code> user. Send a <code>POST</code> request to the register endpoint.</p>"},{"location":"api/device/control-media-processing/","title":"Stream processing","text":"<p>If you're working with cameras and video feeds, you may not want your camera to always process its feed. With that in mind, our API provides mechanisms to start, stop or even pause a camera from processing a stream.</p> <p>To manage the processing of a device, we introduce the concept of the device's processing state. The processing state of a device determines whether its stream is being processed or not. The possible values for the processing state are:</p> State Description Active Device's feed is being processed continuously. Inactive Device's feed is not being processed. Paused Device's feed is not being processed. Pending A request to change the processing state of the device is in progress."},{"location":"api/device/control-media-processing/#pausing-vs-stopping","title":"Pausing vs. Stopping","text":"<p>When you pause a device's processing state, the <code>Image Processor Worker</code> that is processing the device's stream is preserved. If you resume the processing state within a short period of time, the worker will still be available and processing can start again quickly.</p> <p>However, if you pause a device's processing state for a long period of time, the instance of the Image Processor will eventually be stopped. This means that if you resume processing after a long pause, there may be some delay while the Image Processor is restarted and the stream is re-initialized.</p> <p>This is because a Image Processor Worker is a resource-intensive process that consumes a significant amount of memory and processing power. By stopping unused instances, we can free up resources to be used by other processes and ensure that the system runs smoothly.</p>"},{"location":"api/device/control-media-processing/#when-to-pause-vs-stop","title":"When to Pause vs. Stop","text":"<p>So, if you know that you're going to resume processing a device's stream within a short period of time, it's best to pause the processing state rather than stopping it completely. This will ensure that processing can be resumed quickly and without delay.</p>"},{"location":"api/device/control-media-processing/#put-devicesidprocessing-state","title":"PUT <code>/devices/{id}/processing-state</code>","text":"<p>Updates the processing state of an existing device with a given ID.</p>"},{"location":"api/device/control-media-processing/#request-body","title":"Request Body","text":"<p>The request body should contain a JSON object with a single property <code>state</code> indicating the new processing state.</p>"},{"location":"api/device/control-media-processing/#effective-transitions","title":"Effective transitions","text":"From\\To Active Inactive Paused Active No Yes Yes Inactive Yes No No Paused Yes Yes No <p>Pending state</p> <p>You can't transition to the <code>Pending</code> state. The <code>Pending</code> state is only used to indicate that a request to change the processing state of a device is in course.</p>"},{"location":"api/device/control-media-processing/#example","title":"Example","text":"<pre><code>{\n\"state\": \"Paused\"\n}\n</code></pre>"},{"location":"api/device/control-media-processing/#response","title":"Response","text":"<ul> <li><code>202 Accepted</code> on success, meaning that the request has been accepted for processing</li> <li><code>400 Bad Request</code> if the request body is invalid</li> <li><code>404 Not Found</code> if device with the given ID doesn't exist</li> <li><code>409 Conflict</code> if the device is already being updated</li> </ul>"},{"location":"api/device/control-media-processing/#synchronizing-with-the-processing-state-update-finish","title":"Synchronizing with the processing state update finish","text":"<p>When you change the processing state of a device, the response will be returned immediately with a <code>202 Accepted</code> status code. This means that the request has been accepted for processing, but the processing state of the device may not have been updated yet.</p> <p>One approach to ensure that the processing state has been updated is to poll the device's details until the processing state has been updated. Since the device state will be <code>PENDING</code> while the processing state is being updated, you can poll the device's details until the processing state is no longer <code>PENDING</code>.</p> <p>However, this approach is inefficient and can lead to unnecessary load on the server. Instead, we recommend that you use the server-sent events mechanism to subscribe to the device's processing state changes.</p>"},{"location":"api/device/control-media-processing/#device-processing-state-sse","title":"Device Processing State SSE","text":"<p>As soon as you send a request to change the processing state of a device, you can subscribe to the device's processing state changes using the SSE mechanism. This event will return \"PENDING\" as the processing state until the processing state has been updated. Once the processing state has been updated, the event will return the new processing state and close the connection.</p> <p>This is mainly useful to update the UI of your application to reflect the correct processing state of the device in real-time.</p> <p>Can be useful to avoid updating the state of the device again if the processing state is already being updated.</p>"},{"location":"api/device/control-media-processing/#example_1","title":"Example","text":"<pre><code>GET /devices/1/server-events/processing-state\nAccept: text/event-stream\nevent: processing-state\ndata: PENDING\nevent: processing-state\ndata: PENDING\nevent: processing-state\ndata: PENDING\nevent: processing-state\ndata: ACTIVE\n</code></pre>"},{"location":"api/device/general/","title":"Device API","text":"<p>In the context of Sensiflow's api, a \"device\" likely refers to a physical or virtual entity that captures and transmits a feed to be processed by our system. Devices could be physical cameras, such as surveillance cameras, IP cameras, or other types of cameras, that are connected to the system and send image or video data. Devices could also be virtual cameras, such as simulated camera feeds or virtual streams generated for testing or development purposes.</p> <p>The devices are responsible for capturing camera feeds and transmitting them to the system for processing, typically through network protocols such as RTSP (Real-Time Streaming Protocol) or other appropriate methods.</p> <p>The system manages multiple devices, handling their camera feeds simultaneously in real-time, and processing them using the image processor and other components of the system. The system may also handle device registration and processing management for the devices such as starting, pausing, or stopping the processing of a device's feed.</p>"},{"location":"api/device/general/#get-devices","title":"GET <code>/devices</code>","text":"<p>Returns a list of devices.</p> <p>Supports Pagination and Expansion</p>"},{"location":"api/device/general/#response","title":"Response","text":"<ul> <li><code>200 OK</code> - success</li> </ul> Response body example<pre><code>GET /devices?page=1&amp;size=2\nContent-Type: application/json\n{\n\"totalPages\": 1,\n\"totalElements\": 2,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Device 1\",\n\"description\": \"This is device 1\",\n\"streamURL\": \"rtsp://my-stream:5412/1\",\n\"processingState\": \"ACTIVE\",\n\"processedStreamURL\": \"rtsp://my-stream.com:5412/2/detected\",\n\"userID\": 0,\n\"deviceGroupsID\": []\n},\n{\n\"id\": 2,\n\"name\": \"Device 2\",\n\"description\": \"This is device 2\",\n\"streamURL\": \"rtsp://my-stream:5412/2\",\n\"processingState\": \"INACTIVE\",\n\"processedStreamURL\": \"rtsp://my-stream.com:5412/2/detected\",\n\"userID\": 0,\n\"deviceGroupsID\": []\n}\n]\n}\n</code></pre>"},{"location":"api/device/general/#get-devicesid","title":"Get <code>/devices/{id}</code>","text":"<p>Returns a device with a given ID.</p> <p>Supports Expansion</p>"},{"location":"api/device/general/#response_1","title":"Response","text":"<ul> <li><code>200 OK</code> - success</li> </ul> <pre><code>GET /devices/1\nContent-Type: application/json\n{\n\"id\": 1,\n\"name\": \"Device 1\",\n\"description\": \"This is device 1\",\n\"streamURL\": \"rtsp://my-stream.com:5412/1\",\n\"processingState\": \"PAUSED\",\n\"processedStreamURL\": \"rtsp://my-stream.com:5412/1/detected\",\n\"userID\": 1,\n\"deviceGroupsID\": []\n},\n</code></pre> <ul> <li><code>404 Not Found</code> if device with the given ID doesn't exist</li> </ul> <pre><code>GET /devices/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#device-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device with id 1 not found\",\n\"instance\": \"/api/v1/devices/1\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device/general/#post-devices","title":"POST <code>/devices</code>","text":"<p>Creates a new device.</p>"},{"location":"api/device/general/#request-body","title":"Request Body","text":"Parameter Type Description required max length name string device's name yes 20 description string device's description no 100 streamURL string RTSP Url where the device's feed is being transmitted yes 200"},{"location":"api/device/general/#response_2","title":"Response","text":"<ul> <li><code>201 Created on success</code></li> </ul> <pre><code>POST /devices\nContent-Type: application/json\n{\n\"id\": 3\n}\n</code></pre> <ul> <li><code>400 Bad Request if the request body is invalid</code></li> </ul> <pre><code>POST /devices\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#invalid-json-structure\",\n\"title\": \"The provided JSON body has an invalid structure\",\n\"status\": 400,\n\"detail\": \"JSON parse error\",\n\"instance\": \"/api/v1\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device/general/#put-devicesid","title":"PUT <code>/devices/{id}</code>","text":"<p>Updates an existing device details with a given ID.</p>"},{"location":"api/device/general/#request-body_1","title":"Request Body","text":"Parameter Type Description required max length name string device's name no 20 description string device's description no 100 streamURL string RTSP Url where the device's feed is being transmitted no 200 <p>Warning</p> <p>If a device is currently being processed, updating a device's streamUrl will cause the processing of the device's feed to be stopped.</p> <p>Response</p> <ul> <li>204 No Content on success</li> <li>400 Bad Request if the request body is invalid</li> </ul> <pre><code>PUT /devices/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#invalid-json-structure\",\n\"title\": \"The provided JSON body has an invalid structure\",\n\"status\": 400,\n\"detail\": \"JSON parse error\",\n\"instance\": \"/api/v1\",\n\"properties\": null\n}\n</code></pre> <ul> <li>404 Not Found if device with the given ID doesn't exist</li> </ul> <pre><code>PUT /devices/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#device-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device with id 1 not found\",\n\"instance\": \"/api/v1/devices/1\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device/general/#delete-devicesid","title":"DELETE <code>/devices/{id}</code>","text":"<p>Deletes a device with a given ID.</p> <p>Response</p> <ul> <li>204 No Content on success</li> <li>404 Not Found if device with the given ID doesn't exist</li> </ul> <pre><code>DELETE /devices/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#device-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device with id 1 not found\",\n\"instance\": \"/api/v1/devices/1\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device/general/#get-devicesidstats","title":"GET <code>/devices/{id}/stats</code>","text":"<p>Returns the statistics of a device with a given ID.</p> <p>Supports Pagination</p>"},{"location":"api/device/general/#query-parameters","title":"Query Parameters","text":"Parameter Type Description required format from number only return statistics after this timestamp no YYYY-MM-DDTHH:mm:ss to number only return statistics before this timestamp no YYYY-MM-DDTHH:mm:ss <p>Both <code>from</code> and <code>to</code> parameters are optional. If only <code>from</code> is provided, the statistics will be returned from the given timestamp until the current time. If only <code>to</code> is provided, the statistics will be returned from the beginning of time until the given timestamp. If both <code>from</code> and <code>to</code> are provided, the statistics will be returned from the given <code>from</code> timestamp until the given <code>to</code> timestamp as a closed interval.</p> <p>The metrics are retrieved in descending order. Meaning that the first page will contain the most recent metrics.</p>"},{"location":"api/device/general/#response_3","title":"Response","text":"<ul> <li><code>200 OK</code> - success</li> </ul> <pre><code>GET /devices/1/stats?page=1&amp;size=2\nContent-Type: application/json\n{\n\"totalPages\": 2,\n\"totalElements\": 10,\n\"isLast\": true,\n\"isFirt\": true,\n\"items\": [\n{\n\"deviceID\": 1,\n\"startTime\": 1564086180000\n\"endTime\": 1564086300000\n\"peopleCount\": 25\n},\n{\n\"deviceID\": 1,\n\"startTime\": 1564086180000\n\"endTime\": 1564086300000\n\"peopleCount\": 30\n}\n]\n}\n</code></pre> <ul> <li><code>404 Not Found</code> if device with the given ID doesn't exist</li> </ul> <pre><code>GET /devices/1/stats?page=1&amp;size=2\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.com/errors/device-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device with id 1 not found\",\n\"instance\": \"/api/v1/devices/1/stats\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device-group/general/","title":"Managing device groups","text":""},{"location":"api/device-group/general/#get-groupsid","title":"GET <code>/groups/{id}</code>","text":"<p>Returns a device group with a given ID. Supports Expansion. When it is expanded, the group's devices will be paginated with the default Pagination. </p>"},{"location":"api/device-group/general/#response","title":"Response","text":"<ul> <li><code>200 OK</code> - success</li> </ul> <pre><code>GET /groups/1?expand=false\nContent-Type: application/json\n{\n\"id\": 1,\n\"name\": \"Group 1\",\n\"description\": \"This is the first group\",\n}\n</code></pre> <pre><code>GET /groups/1?expanded=true\nContent-Type: application/json\n{\n\"id\": 1,\n\"name\": \"Group 1\",\n\"description\": \"This is the first group\",\n\"devices\": {\n\"totalElements\": 1,\n\"totalPages\": 1,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Device 1\",\n\"description\": \"This is device 1\",\n\"streamURL\": \"rtsp://my-stream:5412/1\",\n\"processingState\": \"ACTIVE\",\n\"userID\": 0,\n\"deviceGroupsID\": [1]\n}\n]\n}\n}\n</code></pre> <ul> <li><code>404 Not Found</code> if device group with the given ID doesn't exist</li> </ul> <pre><code>GET /groups/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#device-group-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device group with id 1 not found\",\n\"instance\": \"/api/v1/groups/1\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device-group/general/#get-groups","title":"GET <code>/groups</code>","text":"<p>Returns all device groups. Supports Expansion and Pagination. Since the requested pagination is applied to the returned groups, if it is expanded, the group's devices will be paginated with the default Pagination and not with the requested one.</p>"},{"location":"api/device-group/general/#response_1","title":"Response","text":"<ul> <li><code>200 OK</code> - success</li> </ul> <pre><code>GET /groups?page=1&amp;size=2&amp;expanded=false\nContent-Type: application/json\n{\n\"totalElements\": 1,\n\"totalPages\": 1,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Group 1\",\n\"description\": \"Group 1 description\"\n}\n]\n}\n</code></pre> <pre><code>GET /groups?page=1&amp;size=2&amp;expanded=true\nContent-Type: application/json\n{\n\"totalElements\": 1,\n\"totalPages\": 1,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Group 1\",\n\"description\": \"Group 1 description\",\n\"devices\": {\n\"totalElements\": 1,\n\"totalPages\": 1,\n\"isLast\": true,\n\"isFirst\": true,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Device 1\",\n\"description\": \"This is device 1\",\n\"streamURL\": \"rtsp://my-stream:5412/1\",\n\"processingState\": \"ACTIVE\",\n\"userID\": 0,\n\"deviceGroupsID\": [1]\n}\n]\n}\n}\n]\n}\n</code></pre>"},{"location":"api/device-group/general/#post-groups","title":"POST <code>/groups</code>","text":"<p>Creates a new device group. Allows to add devices to the group.</p> <p>Adding devices to a group on creation</p> <p>If you want to add devices to a group on creation, you must provide the device's IDs on the query. The devices will be added to the group after the group is created. If a given device ID doesn't exist, it will cause a rollback and the group won't be created.</p>"},{"location":"api/device-group/general/#query-parameters","title":"Query Parameters","text":"Parameter Type Description required devices array device's ids no"},{"location":"api/device-group/general/#request-body","title":"Request Body","text":"Parameter Type Description required max length name string device's name yes 20 description string device's description no 100"},{"location":"api/device-group/general/#response_2","title":"Response","text":"<ul> <li><code>201 Created</code> on success</li> </ul> <pre><code>POST /groups?devices=1,2\nContent-Type: application/json\n{\n\"id\": 93\n}\n</code></pre> <ul> <li><code>400 Bad Request</code> if the request body is invalid</li> </ul> <pre><code>POST /groups?devices=1,2\nContent-Type: application/json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#invalid-json-structure\",\n\"title\": \"The provided JSON body has an invalid structure\",\n\"status\": 400,\n\"detail\": \"JSON parse error\",\n\"instance\": \"/api/v1\",\n\"properties\": null\n}\n</code></pre> <ul> <li><code>404 Not Found</code> if a device ID received on the query doesn't exist </li> </ul> <pre><code>POST /groups?devices=1\nContent-Type: application/json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#device-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device with id 1 not found\",\n\"instance\": \"/api/v1/groups\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device-group/general/#put-groupsid","title":"PUT <code>/groups/{id}</code>","text":"<p>Updates an existing device group with a given ID.</p>"},{"location":"api/device-group/general/#request-body_1","title":"Request Body","text":"Parameter Type Description required max length name string device's name no 20 description string device's description no 100 <p>Response</p> <ul> <li> <p><code>204 No Content</code> on success</p> </li> <li> <p><code>400 Bad Request</code> if the request body is invalid</p> </li> </ul> <pre><code>PUT /groups/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.1\",\n\"title\": \"The provided data is invalid\",\n\"status\": 400,\n\"detail\": \"name must not be blank\",\n\"instance\": \"/api/v1\",\n\"properties\": null\n}\n</code></pre> <ul> <li><code>404 Not Found</code> if device group with the given ID doesn't exist</li> </ul> <pre><code>PUT /groups/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.com/errors/device-group-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device group with id 1 not found\",\n\"instance\": \"/api/v1/groups/1\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device-group/general/#delete-groupsid","title":"DELETE <code>/groups/{id}</code>","text":"<p>Deletes a device group with a given ID.</p> <p>Response</p> <ul> <li> <p><code>204 No Content</code> on success</p> </li> <li> <p><code>404 Not Found</code> if device group with the given ID doesn't exist</p> </li> </ul> <pre><code>DELETE /groups/1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.com/errors/device-group-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device group with id 1 not found\",\n\"instance\": \"/api/v1/groups/1\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device-group/general/#post-groupsiddevices","title":"POST <code>/groups/{id}/devices</code>","text":"<p>Adds devices to the list of devices of a group.</p>"},{"location":"api/device-group/general/#request-body_2","title":"Request Body","text":"Parameter Type Description required deviceIDs array device's ids yes <p>Addition of devices to a group</p> <p>This is the endpoint you should use to add devices in a group. The devices that are added in the group must be ones that were not added yet. On adding a device that is already in the group, it will rollback and not add any of the requested devices. </p> <p>Response</p> <ul> <li><code>201 Created</code> on success</li> </ul> <pre><code>POST /groups/1/devices\nContent-Type: application/problem+json\n{\n\"message\": \"Devices added to group successfully\"\n}\n</code></pre> <ul> <li><code>400 Bad Request</code> if the request body is invalid</li> </ul> <pre><code>POST /groups/1/devices\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#invalid-json-structure\",\n\"title\": \"The provided JSON body has an invalid structure\",\n\"status\": 400,\n\"detail\": \"JSON parse error\",\n\"instance\": \"/api/v1\",\n\"properties\": null\n}\n</code></pre> <ul> <li><code>404 Not Found</code> if device group with the given ID doesn't exist</li> </ul> <pre><code>POST /groups/1/devices\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#device-group-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device group with id 1 not found\",\n\"instance\": \"/api/v1/groups/1/devices\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device-group/general/#delete-groupsiddevices","title":"DELETE <code>/groups/{id}/devices</code>","text":"<p>Deletes devices from the list of devices of a group.</p>"},{"location":"api/device-group/general/#query-parameters_1","title":"Query Parameters","text":"Parameter Type Description required deviceIDs array device's ids yes <p>Deletion of devices of a group</p> <p>This is the endpoint you should use to delete devices of a group. On deleting a device that does not exist, it will rollback and not delete any of the requested devices. </p> <p>Response</p> <ul> <li><code>204 No Content</code> on success</li> <li><code>400 Bad Request</code> if the request body is invalid</li> </ul> <pre><code>DELETE /groups/1/devices?invalid=1\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#required-uri-parameter-missing\",\n\"title\": \"A required parameter is missing\",\n\"status\": 400,\n\"detail\": \"Required request parameter 'deviceIDs' for method parameter type List is not present\",\n\"instance\": \"/api/v1\",\n\"properties\": null\n}\n</code></pre> <ul> <li><code>404 Not Found</code> if device group with the given ID doesn't exist</li> </ul> <pre><code>DELETE /groups/1/devices?deviceIDs=1,2\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.github.io/main/api/errors/general/#device-group-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device group with id 1 not found\",\n\"instance\": \"/api/v1/groups/1/devices\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/device-group/general/#get-groupsiddevices","title":"GET <code>/groups/{id}/devices</code>","text":"<p>Returns a list of devices.</p> <p>Supports Pagination</p>"},{"location":"api/device-group/general/#response_3","title":"Response","text":"<ul> <li><code>200 OK</code> - success</li> </ul> <pre><code>GET /groups/1/devices?page=1&amp;size=2\nContent-Type: application/json\n{\n\"totalPages\": 2,\n\"totalElements\": 10,\n\"items\": [\n{\n\"id\": 1,\n\"name\": \"Device 1\",\n\"description\": \"This is device 1\",\n\"streamURL\": \"rtsp://my-stream:5412/1\",\n\"processingState\": \"ACTIVE\",\n\"userID\": 0,\n\"deviceGroupsID\": [1]\n},\n{\n\"id\": 1,\n\"name\": \"Device 2\",\n\"description\": \"This is device 2\",\n\"streamURL\": \"rtsp://my-stream:5412/2\",\n\"processingState\": \"ACTIVE\",\n\"userID\": 0,\n\"deviceGroupsID\": [1]\n}\n]\n}\n</code></pre> <ul> <li><code>404 Not Found</code> if device group with the given ID doesn't exist</li> </ul> <pre><code>GET /groups/1/devices?page=1&amp;size=2\nContent-Type: application/problem+json\n{\n\"type\": \"https://sensiflow.com/errors/device-group-not-found\",\n\"title\": \"The requested resource was not found\",\n\"status\": 404,\n\"detail\": \"Device group with id 1 not found\",\n\"instance\": \"/api/v1/groups/1/devices\",\n\"properties\": null\n}\n</code></pre>"},{"location":"api/errors/general/","title":"Errors","text":"<p>The errors returned by the API are in Problem Details for HTTP APIs format. This format is defined in RFC 7807. The following is an example of an error returned by the API:</p> <pre><code>{\n\"type\": \"https://example.com/probs/out-of-credit\",\n\"title\": \"You do not have enough credit.\",\n\"detail\": \"Your current balance is 30, but that costs 50.\",\n\"instance\": \"/account/12345/msgs/abc\",\n\"balance\": 30,\n\"accounts\": [\"/account/12345\",\n\"/account/67890\"]\n}\n</code></pre> <p>The following is a list of all the errors that can be returned by the API.</p>"},{"location":"api/errors/general/#client-errors","title":"Client errors","text":""},{"location":"api/errors/general/#conflict","title":"Conflict","text":"<p>The resource already exists.</p>"},{"location":"api/errors/general/#email-already-exists","title":"Email Already Exists","text":"<p>The given email already exists. This may be caused by trying to create a User with an already registered email.</p>"},{"location":"api/errors/general/#not-found","title":"Not Found","text":"<p>The requested resource does not exist. This can happen when you try to access a resource that does not exist. The following errors are related to this one:</p>"},{"location":"api/errors/general/#user-not-found","title":"User Not Found","text":"<p>The requested user does not exist. This may be caused by an invalid user id.</p>"},{"location":"api/errors/general/#device-not-found","title":"Device Not Found","text":"<p>The requested device does not exist. This may be caused by an invalid device id.</p>"},{"location":"api/errors/general/#device-group-not-found","title":"Device Group Not Found","text":"<p>The requested device group does not exist. This may be caused by an invalid device group id.</p>"},{"location":"api/errors/general/#processed-stream-not-found","title":"Processed Stream Not Found","text":"<p>The requested processed stream does not exist. This may be caused by an invalid processed stream id.</p>"},{"location":"api/errors/general/#role-not-found","title":"Role Not Found","text":"<p>The requested role does not exist. This may happen when updating a user\u00b4s role to non existent one. </p>"},{"location":"api/errors/general/#email-not-found","title":"Email Not Found","text":"<p>The requested email does not exist. This may be caused by search for a non existing email.</p>"},{"location":"api/errors/general/#authentication-and-authorization-errors","title":"Authentication and Authorization errors","text":""},{"location":"api/errors/general/#forbidden","title":"Forbidden","text":"<p>The request is not allowed with the given credentials. This can happen when you try to access a resource that you are not authorized to access. This may be cause by not having enough permissions to access the resource.</p>"},{"location":"api/errors/general/#unauthenticated","title":"Unauthenticated","text":"<p>The request was not authenticated. This may happen when you try to access a resource that requires authentication and you are not authenticated. To authenticate, you must make a valid login or register request.</p>"},{"location":"api/errors/general/#invalid-credentials","title":"Invalid Credentials","text":"<p>The credentials provided are invalid. This may happen when you try to login with invalid credentials.</p>"},{"location":"api/errors/general/#validation-errors","title":"Validation errors","text":"<p>The received data is invalid. The following errors are related to this one:</p>"},{"location":"api/errors/general/#invalid-token","title":"Invalid Token","text":"<p>The received token is invalid. This may be caused by an expired token or a no longer valid token.</p>"},{"location":"api/errors/general/#invalid-parameter","title":"Invalid Parameter","text":"<p>The parameter is invalid. This can happen when a sent parameter has the wrong format,type, or even if it is missing.</p>"},{"location":"api/errors/general/#invalid-json-structure","title":"Invalid Json Structure","text":"<p>The received JSON body is invalid, this means that the JSON is not well formed or there is a missing field check the necessary parameters on the endpoint documentation. Check the JSON structure to see what is the correct format.</p>"},{"location":"api/errors/general/#handler-not-found","title":"Handler Not Found","text":"<p>This happens when a request is made to an endpoint that does not exist.</p>"},{"location":"api/errors/general/#method-not-allowed","title":"Method Not Allowed","text":"<p>This happens when a request is made to an endpoint with an invalid method.</p>"},{"location":"api/errors/general/#required-uri-parameter-missing","title":"Required Uri Parameter Missing","text":"<p>This happens when a request is made to an endpoint with a missing required parameter. Please check the endpoint documentation to see what parameters are required.</p>"},{"location":"api/errors/general/#invalid-processing-state","title":"Invalid Processing State","text":"<p>The given processing state is invalid. This may be caused by trying to update a processed stream with an invalid processing state.</p>"},{"location":"api/errors/general/#invalid-processing-state-transition","title":"Invalid Processing State Transition","text":"<p>This happens when updating a device with an invalid processing state transition. This may occur when the state was the same as the previous one or when it was paused and a request is made to be inactive.</p>"},{"location":"api/errors/general/#server-errors","title":"Server errors","text":""},{"location":"api/errors/general/#internal-server-error","title":"Internal Server Error","text":"<p>An internal server error occurred. This can happen when the server is not able to process the request.</p>"},{"location":"api/user/general/","title":"Managing users","text":""},{"location":"api/user/general/#post-users","title":"POST <code>/users</code>","text":"<p>Registers a new user.</p>"},{"location":"api/user/general/#request-body","title":"Request Body","text":"Parameter Type Description required min length max length email string user's email address yes 3 100 firstName string user's first name yes 3 20 lastName string user's last name yes 3 20 password string Password requires at least 1 special character, 1 uppercase and lower case character yes 3 20"},{"location":"api/user/general/#response","title":"Response","text":"<ul> <li><code>201 Created</code> on success</li> </ul> <pre><code>POST /users/\nContent-Type: application/json\n{\n\"id\": 1\n}\n</code></pre> <ul> <li><code>400 Bad Request</code> if the request body is invalid</li> </ul>"},{"location":"api/user/general/#post-userslogin","title":"POST <code>/users/login</code>","text":"<p>Logs in an existing user. Upon success, a cookie will be sent with the user's token.</p>"},{"location":"api/user/general/#request-body_1","title":"Request Body","text":"Parameter Type Description required min length max length email string user's email address yes 3 100 password string Password requires at least 1 special character, 1 uppercase and lower case character yes 3 20"},{"location":"api/user/general/#response_1","title":"Response","text":"<ul> <li><code>200 OK</code> on success</li> </ul> <p><pre><code>POST /users/login\nContent-Type: application/json\n{\n\"id\": 1\n}\n</code></pre> * <code>400 Bad Request</code> if the request body is invalid</p>"},{"location":"api/user/general/#post-userslogout","title":"POST <code>/users/logout</code>","text":"<p>Logs out the current user. The user's token will be invalidated.</p>"},{"location":"api/user/general/#request-body_2","title":"Request Body","text":"<ul> <li>none</li> </ul>"},{"location":"api/user/general/#response_2","title":"Response","text":"<ul> <li><code>200 OK</code> on success</li> </ul>"},{"location":"api/user/general/#get-usersuserid","title":"GET <code>/users/{userID}</code>","text":"<p>Gets the user with the specified ID.</p>"},{"location":"api/user/general/#response_3","title":"Response","text":"<ul> <li><code>200 OK</code> on success</li> <li><code>404 Not Found</code> if the user does not exist</li> </ul> <pre><code>GET /users/1\nContent-Type: application/json\n{\n\"email\": \"user@example.com\",\n\"firstName\": \"John\",\n\"lastName\": \"Doe\"\n}\n</code></pre>"},{"location":"api/user/general/#get-users","title":"GET <code>/users</code>","text":"<p>Gets all users.</p> <p>Supports Pagination</p>"},{"location":"api/user/general/#response_4","title":"Response","text":"<ul> <li><code>200 OK</code> on success</li> </ul> <pre><code>GET /users\nContent-Type: application/json\n{\n\"totalPages\": 2,\n\"totalElements\": 10,\n\"isLast\": true,\n\"isFirt\": true,\n\"items\": [\n{\n\"id\" : 1,\n\"email\": \"test@email.com\",\n\"firstName\": \"John\",\n\"lastName\": \"Doe\",\n\"role\": \"Admin\"\n},\n{\n\"id\" : 2,\n\"email\": \"test1@gmail.com\",\n\"firstName\": \"Jane\",\n\"lastName\": \"Doe\",\n\"role\": \"User\"\n}\n]\n}\n</code></pre>"},{"location":"api/user/general/#put-usersuserid","title":"PUT <code>/users/{userID}</code>","text":"<p>Updates the user with the specified ID. If the the user that is updating the <code>userID</code> is not the same as the one being updated, the user must be an <code>Admin</code> or a <code>Moderator</code>. The role hierarchy is respected, this means that an <code>Admin</code> can update any user, a <code>Moderator</code> can update any user except an <code>Admin</code>, and a <code>User</code> can only update itself. </p>"},{"location":"api/user/general/#request-body_3","title":"Request Body","text":"Parameter Type Description required min length max length firstName string user's first name no 3 20 lastName string user's last name no 3 20 password string Password requires at least 1 special character, 1 uppercase and lower case character no 3 20 -- -- -- -- -- --"},{"location":"api/user/general/#response_5","title":"Response","text":"<ul> <li><code>204 No content</code> on success</li> <li><code>404 Not Found</code> if the user does not exist    </li> <li><code>400 Bad Request</code> if the request body is invalid</li> <li><code>403 Forbidden</code> if the user does not have permission to update the user information</li> </ul> <pre><code>PUT /users/1\nContent-Type: application/json\n{\n\"firstName\": \"Jane\",\n\"lastName\": \"Doe\",\n\"password\": \"Password123.\"\n}\n</code></pre>"},{"location":"api/user/general/#delete-usersuserid","title":"DELETE <code>/users/{userID}</code>","text":"<p>Deletes the user with the specified ID.</p>"},{"location":"api/user/general/#response_6","title":"Response","text":"<ul> <li><code>204 No content</code> on success</li> <li><code>404 Not Found</code> if the user does not exist</li> <li><code>403 Forbidden</code> if the user does not have permission to delete the user</li> </ul> <pre><code>DELETE /users/1\nContent-Type: application/json\n</code></pre>"},{"location":"api/user/general/#put-usersuseridrole","title":"PUT <code>/users/{userID}/role</code>","text":"<p>Updates the user's role with the specified ID. Check the Access Control section for more information about the roles.</p>"},{"location":"api/user/general/#request-body_4","title":"Request Body","text":"Parameter Type Description required min length max length role string user's role yes 3 20"},{"location":"api/user/general/#response_7","title":"Response","text":"<ul> <li><code>204 No content</code> on success</li> <li><code>404 Not Found</code> if the user does not exist</li> <li><code>400 Bad Request</code> if the request body is invalid</li> <li><code>403 Forbidden</code> if the user does not have permission to update the user's role</li> </ul>"},{"location":"contributing/documentation/","title":"Contributing to the documentation","text":"<p>This section will help you start writing documentation for our project.</p> <p>Context directory</p> <p>The following instructions assume you are in the root directory of the project.</p>"},{"location":"contributing/documentation/#using-pip","title":"Using pip","text":"<p>Python 3.7 or higher required</p> <p>These instructions assume you have Python 3.7 or higher and pip installed. If you don't have Python installed, you can download it from the Python website.</p> <p>If you don't want to install python, you should consider using docker to run the development server.</p> <p>To install all documentation required dependencies:</p> <pre><code>pip install -r docs-requirements.txt\n</code></pre> <p>Start the live-reload development server:</p> <pre><code>mkdocs serve\n</code></pre> <p>You're done!</p>"},{"location":"contributing/documentation/#using-docker","title":"Using Docker","text":"<p>Assuming you have Docker installed, you can use the provided Dockerfile to build a Docker image that will run the MkDocs development server with all the required dependencies.</p>"},{"location":"contributing/documentation/#build-the-docker-image","title":"Build the Docker image","text":"<p>To build the documentation Docker image:</p> <pre><code>docker build -t sensiflow-docs -f ./docker/Dockerfile-docs .\n</code></pre>"},{"location":"contributing/documentation/#run-a-container-from-the-image","title":"Run a container from the image","text":"Linux, Windows Powershell or MacOsWindows CMD <pre><code>docker run -it --rm -p 8000:8000 -v ${PWD}:/docs sensiflow-docs\n</code></pre> <pre><code>docker run --rm -it -p 8000:8000 -v %cd%:/docs sensiflow-docs\n</code></pre>"},{"location":"contributing/documentation/#done","title":"Done!","text":"<p>You should have a live-reloading development server running at http://localhost:8000.</p> <p>Writing anything in the docs folder will automatically trigger a rebuild of the site.</p>"},{"location":"contributing/image-processor/","title":"Contributing to the image processor module","text":"<p>This section will help you start the development environment for the image processor module.</p>"},{"location":"contributing/image-processor/#module-overview-and-definitions","title":"Module overview and definitions","text":"<p>The image-processor module is the module responsible for managing worker instances that detect objects in the device's video stream and write the collected insights to the database.</p> <p>The module is composed of the following components:</p> <ul> <li> <p>Instance Manager - The Instance Manager is responsible for managing the image processor workers. It communicates with the API to receive commands to start, stop, and delete instances. It is a consumer of the <code>Instance Controller Queue</code> from the message broker to receive device status updates and device delete requests from the <code>API</code>. It also publishes messages to acknowledge device status updates and device delete requests using the <code>ACK Device Status Queue</code> and <code>ACK Device Delete Queue</code> respectively.</p> </li> <li> <p>Image Processor Worker - The Image Processor Worker is responsible for processing the video stream and writing the metrics to the database. There is one worker running for each device with the <code>ACTIVE</code> status. This is the only statement that we guarantee. However, there can be less workers than devices with the stopped or paused status, because the scheduler might have stopped or deleted some instances to free up resources. The worker runs in a Docker container and runs machine learning inferences to detect objects in the video stream. The insights are then written to the metrics database.</p> </li> <li> <p>Instance Manager Scheduler - This scheduler checks for long paused instances and stops them. It also checks for long stopped instances and deletes them. The scheduler is an optional component that was built to recover from unexpected errors that might occur in the <code>Instance Manager</code> and to clean up some instances that might have been left in a paused or stopped state, to free up resources automatically.</p> </li> </ul>"},{"location":"contributing/image-processor/#pre-requisites","title":"Pre-requisites","text":"<ul> <li> <p>Docker needs to be installed on the machine where the module will be developed, even if the module is not run within a Docker container, the Instance Manager communicates with the Docker daemon to manage Image Processor instances, which run within Docker containers.</p> </li> <li> <p>Python 3.8 - 3.10 needs to be installed on your environment.</p> </li> <li> <p>Poetry needs to be installed on your machine. Poetry is a Python tool for managing dependencies and creating reproducible builds. It simplifies the declaration and management of project dependencies, virtual environments, and packaging.</p> </li> </ul>"},{"location":"contributing/image-processor/#installing-and-running-the-required-dependencies","title":"Installing and running the required dependencies","text":"<p>Once all the pre-requisites are met, the following steps need to be followed:</p> <p>Branch naming convention</p> <p>For now we are not enforcing any branch naming convention.</p>"},{"location":"contributing/image-processor/#clone-the-main-repository-and-navigate-to-the-root-directory","title":"Clone the main repository and navigate to the <code>root</code> directory","text":"<pre><code>git clone https://github.com/sensiflow/main\n</code></pre> <pre><code>cd main\n</code></pre> <p>Followed by cloning the image-processor module:</p> <pre><code>git clone https://github.com/sensiflow/image-processor\n</code></pre>"},{"location":"contributing/image-processor/#run-the-required-services","title":"Run the required services","text":"<p>If you come from the main repository project installation guide, you can skip to step 3.</p> <p>If you are solely interested in the image-processor module, you can follow the steps below to run the required services.</p> <p>Before running the application, make sure you have all the services running. The following services are required:</p> <ul> <li>PostgreSQL Database</li> <li>RabbitMQ Message Broker</li> <li>RTSP Server (MediaMTX)</li> </ul>"},{"location":"contributing/image-processor/#using-docker-compose","title":"Using docker-compose","text":"<p>If you are using Docker, the main repository contains a docker-compose.yml file that can be used to start all the required services with the recommended configurations and schemas without having to install them manually.</p> <p>To start the services using docker-compose, run the following command:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"contributing/image-processor/#manually","title":"Manually","text":"<p>If you are not using Docker, you will need to install and run the services manually.</p>"},{"location":"contributing/image-processor/#postgresql-database","title":"PostgreSQL Database","text":"<p>To populate the database with the required tables and data you can use the create_schema.sql sql file in <code>sql/init/</code> folder.</p> <p>Run it in your database management tool of choice.</p>"},{"location":"contributing/image-processor/#rabbitmq-message-broker","title":"RabbitMQ Message Broker","text":"<p>The RabbitMQ Message Broker needs 3 queues to be created:</p> <ol> <li> <p>A controller queue that sends control messages to the Instance Manager</p> </li> <li> <p>An acknowledge queue for the Instance Manager to send acknowledgements to the API about changing the state of an instance</p> </li> <li>An acknowledge queue for the Instance Manager to send acknowledgements to the API about deleting an instance</li> </ol> <p>The configuration files of the rabbitmq broker are in the rabbit-init folder.</p> <p>Otherwise you'll have to create them manually using a rabbitmq management tool.</p>"},{"location":"contributing/image-processor/#virtual-environment","title":"Virtual environment","text":"<ol> <li> <p>Navigate to the <code>image-processor</code> directory:</p> <pre><code>cd image-processor\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> <pre><code>poetry shell\n</code></pre> </li> <li> <p>Install the dependencies:     <pre><code>poetry install\n</code></pre></p> </li> </ol>"},{"location":"contributing/image-processor/#create-a-branch-for-your-changes","title":"Create a branch for your changes","text":"<pre><code>git checkout -b &lt;branch-name&gt;\n</code></pre>"},{"location":"contributing/image-processor/#running-the-application","title":"Running the application","text":""},{"location":"contributing/image-processor/#configuring-the-application","title":"Configuring the application","text":"<p>The application is configured by environment variables and a configuration file.</p>"},{"location":"contributing/image-processor/#environment-variables","title":"Environment variables","text":"<p>The <code>ENVIRONMENT</code> environment variable is used to determine which configuration file to use. The configuration file is located in the <code>configs</code> directory and is named <code>${ENVIRONMENT}.ini</code>.</p> <p>The file follows the INI format.</p> <p>The amount of configuration files is not limited to the ones that are already there. You can create as many as you want and name them as you wish. The only requirement is that the name of the file should match the value of the <code>ENVIRONMENT</code> environment variable when running the application.</p>"},{"location":"contributing/image-processor/#restricted-profiles","title":"Restricted profiles","text":"<p>The only restricted values for the <code>ENVIRONMENT</code> environment variable are:</p> <ul> <li>prod - used for the production environment</li> <li>ci - used for the continuous integration environment</li> <li>test - used for the testing environment</li> </ul>"},{"location":"contributing/image-processor/#example","title":"Example","text":"<p>Here's an example running the application by using a <code>dev</code> profile:</p> <p>First let's set the <code>ENVIRONMENT</code> environment variable to <code>dev</code>:</p> Linux, Windows Powershell or MacOSWindows CMD <pre><code>export ENVIRONMENT=dev\n</code></pre> <pre><code>set ENVIRONMENT=dev\n</code></pre> <p>Because you set the <code>ENVIRONMENT</code> environment variable to <code>dev</code>, you should create a <code>dev.ini</code> file in the <code>configs</code> folder to run the application.</p> <pre><code>\u251c\u2500\u2500 main\n\u2502   \u251c\u2500\u2500 image-processor\n\u2502   \u2502   \u251c\u2500\u2500 configs\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 dev.ini\n</code></pre> <p>The config file reference can be found here.</p>"},{"location":"contributing/image-processor/#configuration-file-example","title":"Configuration File Example","text":"<p>Here's an example of a <code>dev.ini</code> file. This is the file that you should use if you ran the services using <code>docker compose</code>.</p> <pre><code>[DATABASE]\nURL=postgres://postgres:postgres@localhost:5432\n[RABBITMQ]\nHOST=localhost\nPORT=5672\nUSER=guest\nPASSWORD=guest\nINSTANCE_CONTROLLER_QUEUE=instance_ctl\nACK_DEVICE_STATUS_QUEUE=instance_ack_device_state\nACK_DEVICE_DELETE_QUEUE=instance_ack_device_delete\n[HARDWARE_ACCELERATION]\nPROCESSING_MODE=CPU\nCUDA_VERSION=11.7 # Without PROCESSING_MODE=GPU, this is irrelevant\n</code></pre>"},{"location":"contributing/image-processor/#application-entry-point","title":"Application entry point","text":"<p>The application entry point is located in the <code>image_processor</code> directory and is named <code>run.py</code>.</p> <pre><code>\u251c\u2500\u2500 main\n\u2502   \u251c\u2500\u2500 image-processor\n\u2502   \u2502   \u251c\u2500\u2500 run.py\n</code></pre> <p>To run it, use the following command in the same terminal where you activated the virtual environment and set the environment variables:</p> <pre><code>poetry run python run.py\n</code></pre> <p>Run the scheduler in a separate process:</p> <pre><code>poetry run python scheduler.py\n</code></pre>"},{"location":"contributing/image-processor/#scalability","title":"Scalability","text":"<p>The application is designed to be scalable. You can run multiple instances of the instance manager application.</p> <p>The same doesn't apply to the scheduler. The scheduler is designed to run only one instance. Running multiple instances of the scheduler is a waster of resources and can cause unexpected behavior (improbable, but possible).</p>"},{"location":"contributing/image-processor/#running-code-checks-separately","title":"Running code checks separately","text":""},{"location":"contributing/image-processor/#running-tests","title":"Running tests","text":""},{"location":"contributing/image-processor/#requirements","title":"Requirements","text":"<p>To run the integration tests you need to have the following services running:</p> <ul> <li>PostgreSQL Database</li> <li>RabbitMQ Message Broker</li> <li>Docker Engine</li> </ul>"},{"location":"contributing/image-processor/#test-configuration","title":"Test configuration","text":"<p>The tests can be configured by the <code>test</code> profile. Because the tests use the <code>ENVIRONMENT=test</code> environment variable, you should create a <code>test.ini</code> file in the <code>configs</code> folder to run the tests. with the required services running.</p> <p>Of course if you have docker installed, you can run the services using <code>docker compose</code> with the <code>docker-compose.test.yml</code> file in the root directory, this file serves both to the image-processor and api tests.</p> <p>With the test services running use the following command in the same terminal where you activated the virtual environment:</p> <pre><code>poetry run pytest\n</code></pre>"},{"location":"contributing/image-processor/#running-the-linter","title":"Running the linter","text":"<p>To run the linter, use the following command in the same terminal where you activated the virtual environment:</p> <pre><code>poetry run flake8\n</code></pre>"},{"location":"contributing/image-processor/#running-code-checks","title":"Running code checks","text":"<p>The code checks use tox.</p> <p>Tox runs the following checks:</p> <ul> <li>Linter (flake8) - a tool for enforcing style consistency across Python projects</li> <li>Tests (pytest) - a testing framework for Python</li> </ul> <p>To run the code checks, use the following command in the same terminal where you activated the virtual environment:</p> <pre><code>poetry run tox\n</code></pre> <p>Run tox before committing</p> <p>It is recommended to run tox before committing your changes to the repository. The ci will run tox on the branch on pull request, so it is better to run it locally and fix any issues before pushing your changes.</p> <p>Tox will run the code checks for python versions <code>3.8</code>, <code>3.9</code> and <code>3.10</code>. When developing, we recommend running code checks separately for the python version you are using. We recommend running tox just before committing your changes since it takes a significant amount of time to run.</p>"},{"location":"getting-started/config-file-reference/","title":"Configuration file reference","text":"<p>This is what a configuration file looks like:</p> <pre><code>[DATABASE]\nHOST=localhost\nPORT=5432\nUSER=postgres\nPASSWORD=postgres\n[RABBITMQ]\nHOST=localhost\nPORT=5672\nUSER=guest\nPASSWORD=guest\nINSTANCE_CONTROLLER_QUEUE=instance_ctl\nACK_DEVICE_STATUS_QUEUE=instance_ack_device_state\nACK_DEVICE_DELETE_QUEUE=instance_ack_device_delete\n[HARDWARE_ACCELERATION]\nPROCESSING_MODE=GPU\nCUDA_VERSION=11.7\n</code></pre> <p>The following table lists the configuration parameters that can be set in the configuration file for the image processor module.</p>"},{"location":"getting-started/config-file-reference/#sections","title":"Sections","text":""},{"location":"getting-started/config-file-reference/#database","title":"DATABASE","text":"<p>The <code>DATABASE</code> section contains the configuration parameters for the database connection.</p> Parameter Description Example <code>HOST</code> The database host. <code>localhost</code> <code>PORT</code> The database port. <code>5432</code> <code>USER</code> The database user. <code>postgres</code> <code>PASSWORD</code> The database password. <code>postgres</code>"},{"location":"getting-started/config-file-reference/#rabbitmq","title":"RABBITMQ","text":"<p>The <code>RABBITMQ</code> section contains the configuration parameters for the RabbitMQ connection.</p> Parameter Description Example <code>HOST</code> The RabbitMQ host. <code>localhost</code> <code>PORT</code> The RabbitMQ port. <code>5672</code> <code>USER</code> The RabbitMQ user. <code>guest</code> <code>PASSWORD</code> The RabbitMQ password. <code>guest</code> <code>INSTANCE_CONTROLLER_QUEUE</code> The RabbitMQ queue for control messages for the instance manager. <code>instance_ctl</code> <code>ACK_DEVICE_STATUS_QUEUE</code> The RabbitMQ queue to acknowledge device status messages. <code>instance_ack_device_state</code> <code>ACK_DEVICE_DELETE_QUEUE</code> The RabbitMQ queue to acknowledge device remove messages. <code>instance_ack_device_delete</code>"},{"location":"getting-started/config-file-reference/#rtsp-server","title":"RTSP Server","text":"<p>The <code>RTSP_SERVER</code> section contains the configuration parameters for the RTSP server.</p> Parameter Description Example <code>PORT</code> The port where the RTSP server will be listening for incoming RTSP requests. <code>8554</code> <code>HOST</code> The host where the RTSP server will be listening for incoming RTSP requests. <code>localhost</code>"},{"location":"getting-started/config-file-reference/#hardware-acceleration","title":"Hardware Acceleration","text":"<p>Each docker instance of the image processor module can be configured to use either the CPU or the GPU for the image processing and recognition.</p> <p>The <code>Hardware Acceleration</code> section contains the configuration parameters for the hardware acceleration of the image processing and recognition of the docker instances.</p> Parameter Description Example PROCESSING_MODE The hardware acceleration mode for the image processing of the image processor instances <code>GPU</code> or <code>CPU</code> CUDA_VERSION The CUDA version to use for the image processing of the image processor instances. <code>11.7</code> <p>Cuda with GPU</p> <p><code>CUDA_VERSION</code> is only used when <code>PROCESSING_MODE</code> is set to <code>GPU</code>.</p>"},{"location":"getting-started/config-file-reference/#docker-with-gpu-os-support","title":"Docker with GPU OS support","text":"<p>To run a docker container with GPU support, the host machine needs to have the Nvidia Container Toolkit installed.</p> <p>The Nvidia Container Toolkit has only support for the <code>Linux</code> operating system. You can find more information about the supported linux distributions here.</p> <p>WSL 2</p> <p>If you are using WSL 2 with one of the distributions supported, you can use the following guide to install CUDA on WSL2.</p> <p>Running with CPU</p> <p>If you don't have a GPU or for some reason you can't run the docker container with GPU support, you can run the manager to use docker containers that run image processing and recognition on the CPU. In this case you can set <code>PROCESSING_MODE</code> to <code>CPU</code>. Keep in mind that this will result in a huge performance loss in the image detection and stream processing.</p>"},{"location":"getting-started/config-file-reference/#find-the-cuda-version-of-your-gpu","title":"Find the CUDA version of your GPU","text":"<p>First of all you need to have a nvidia GPU that supports CUDA. You can find a list of supported GPUs here.</p> <p>If you have a supported GPU, you can find the CUDA version of your GPU by running the following command:</p> <pre><code>nvidia-smi\n</code></pre> <p>You should get an output similar to this one:</p> <p></p> <p>Now you can set the <code>CUDA_VERSION</code> to the version of your GPU.</p>"},{"location":"getting-started/config-file-reference/#logging","title":"Logging","text":"<p>The <code>Logging</code> section contains the configuration parameters for the logging.</p> <p>TODO: Add logging configuration parameters.</p>"},{"location":"getting-started/image-processor/","title":"Image processor","text":"<p>This section will walk you through the process of installing and configuring the Image Processor module of the Sensiflow's system. This module is responsible for processing the images captured by the camera and sending the results to the Sensiflow's system.</p> <p>The module is composed of two parts:</p> <ul> <li> <p>Instance Manager: This is the main component of the module. It is responsible for managing the instances of the Image Processor.</p> </li> <li> <p>Image Processor: This is the component that processes the images captured by the camera. It is responsible for detecting the objects in the image and sending the results to the Sensiflow's system.</p> </li> </ul>"},{"location":"getting-started/image-processor/#technologies","title":"Technologies","text":"<p>The Instance Manager is developed in python and uses the following technologies:</p> <ul> <li> <p>pika: Pika is a pure-Python implementation of the AMQP protocol that tries to stay fairly independent of the underlying network support library.</p> </li> <li> <p>Docker SDK for Python: The Docker SDK for Python is a library for working with the Docker Engine API.</p> </li> <li> <p>psycopg: Psycopg is the most popular PostgreSQL database adapter for the Python programming language.</p> </li> </ul> <p>The Image Processor instance is developed in python and uses the following technologies:</p> <ul> <li> <p>OpenCV: OpenCV is an open source computer vision and machine learning software library. It is used for image processing.</p> </li> <li> <p>Pytorch: Pytorch is an open source machine learning framework. It is used for object detection.</p> </li> </ul>"},{"location":"getting-started/image-processor/#pre-requisites","title":"Pre-requisites","text":"<p>Prior to installation, the following prerequisites must be met:</p> <ul> <li> <p>Docker needs to be installed on the machine where the module will be deployed, even if the module is not run within a Docker container. The Instance Manager communicates with the Docker daemon to manage Image Processor instances, which are implemented as Docker containers.</p> </li> <li> <p>Poetry needs to be installed on the machine where the module will be deployed. Poetry is a Python tool for managing dependencies and creating reproducible builds. It simplifies the declaration and management of project dependencies, virtual environments, and packaging.</p> </li> </ul>"},{"location":"getting-started/image-processor/#installation","title":"Installation","text":"<p>You can install the Image Processor module in two ways:</p> <ul> <li> <p>Using Docker</p> </li> <li> <p>Manually</p> </li> </ul> <p>For a reliable and streamlined installation, it is recommended to use Docker to install the Image Processor module. Docker automatically handles dependencies, ensuring correct versions are installed. Manual installation may require manual dependency management, which can be error-prone.</p>"},{"location":"getting-started/image-processor/#manually","title":"Manually","text":""}]}